{
  "openapi": "3.1.0",
  "info": {
    "title": "NIST Resource Metadata Management API",
    "description": "These are set of APIs which return the NIST public data repository related information. First one is the Search and discover API to get the dataset results for given criteria or dataset identifier. Second is to get different versions of the records or metadata for given dataset. Third one is to get the usage metrics for different datasets. For any inquiries, please contact the support team at datasupport@nist.gov.",
    "version": "0.0.1",
     "license": {
            "name": "NIST Software",
            "url": "https://www.nist.gov/open/copyright-fair-use-and-licensing-statements-srd-data-software-and-technical-series-publications"
        }
  },
  "servers": [
    {
       "url": "https://data.nist.gov/rmm",
       "description": "data.nist.gov"
    },
        {
            "url": "/rmm"
        }
  ],
  "paths": {
    "/records/fields": {
      "get": {
        "tags": [
          "fields"
        ],
        "summary": "Search Fields",
        "operationId": "search_fields_records_fields_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {

                }
              }
            }
          }
        }
      }
    },
    "/records/fields/": {
      "get": {
        "tags": [
          "fields"
        ],
        "summary": "Search Fields",
        "operationId": "search_fields_records_fields__get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {

                }
              }
            }
          }
        }
      }
    },
    "/records/fields/{field_id}": {
      "get": {
        "tags": [
          "fields"
        ],
        "summary": "Get Field",
        "description": "Get a single field by ID.\n\nArgs:\n    field_id (str): The ID of the field to retrieve\n    \nReturns:\n    Dict: The field data with metadata\n    \nRaises:\n    KeyWordNotFoundException: If the field with the specified ID is not found\n    InternalServerException: If there is an error processing the request",
        "operationId": "get_field_records_fields__field_id__get",
        "parameters": [
          {
            "name": "field_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Field Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {

                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/records": {
      "get": {
        "summary": "Search Records",
        "description": "Search record entries in the database.\n\nArgs:\n    params (Dict[str, Any]): Search parameters including:\n        - searchphrase (str, optional): Text to search for\n        - skip (int, optional): Number of records to skip\n        - limit (int, optional): Maximum records to return\n        - include/exclude (List[str], optional): Fields to include/exclude\n        \nReturns:\n    Dict: {\n        \"ResultData\": List of matched records,\n        \"ResultCount\": Total number of matches,\n        \"PageSize\": Number of records per page,\n        \"Metrics\": Query execution metrics\n    }",
        "operationId": "search_records_records_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {

                }
              }
            }
          }
        }
      }
    },
    "/records/": {
      "get": {
        "summary": "Search Records",
        "description": "Search record entries in the database.\n\nArgs:\n    params (Dict[str, Any]): Search parameters including:\n        - searchphrase (str, optional): Text to search for\n        - skip (int, optional): Number of records to skip\n        - limit (int, optional): Maximum records to return\n        - include/exclude (List[str], optional): Fields to include/exclude\n        \nReturns:\n    Dict: {\n        \"ResultData\": List of matched records,\n        \"ResultCount\": Total number of matches,\n        \"PageSize\": Number of records per page,\n        \"Metrics\": Query execution metrics\n    }",
        "operationId": "search_records_records__get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {

                }
              }
            }
          }
        }
      }
    },
    "/records/{record_id}": {
      "get": {
        "summary": "Get Record",
        "description": "Get a record by ID or EDIID or ARK identifier.\nThe :path converter allows for slashes and special characters in the record_id\n\n\nArgs:\n    record_id: Either a MongoDB ID or an EDIID\n    \nReturns:\n    dict: The record data without wrapper",
        "operationId": "get_record_records__record_id__get",
        "parameters": [
          {
            "name": "record_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Record Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {

                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/papers": {
      "get": {
        "summary": "Search Papers",
        "description": "Search papers from the NIST Papers API.\n\nArgs:\n    searchphrase (str, optional): Text to search for in papers\n    from_date (str, optional): Start date for search (YYYY-MM-DD)\n    skip (int): Number of results to skip (pagination)\n    limit (int): Maximum number of results to return\n    include (List[str], optional): Fields to include in results\n    exclude (List[str], optional): Fields to exclude from results\n    \nReturns:\n    Dict: {\n        \"ResultData\": List of matched papers,\n        \"ResultCount\": Total matches found,\n        \"PageSize\": Number of results per page,\n        \"Metrics\": Query execution metrics\n    }\n    \nRaises:\n    KeyWordNotFoundException: If no papers found matching the criteria\n    InternalServerException: If there is an error connecting to the Papers API\n    IllegalArgumentException: If the parameters are invalid",
        "operationId": "search_papers_papers_get",
        "parameters": [
          {
            "name": "searchphrase",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Text to search for",
              "title": "Searchphrase"
            },
            "description": "Text to search for"
          },
          {
            "name": "from_date",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Search from date (YYYY-MM-DD)",
              "default": "2010-01-01",
              "title": "From Date"
            },
            "description": "Search from date (YYYY-MM-DD)"
          },
          {
            "name": "skip",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "description": "Number of papers to skip",
              "default": 0,
              "title": "Skip"
            },
            "description": "Number of papers to skip"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "description": "Maximum number of papers to return",
              "default": 10,
              "title": "Limit"
            },
            "description": "Maximum number of papers to return"
          },
          {
            "name": "include",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                {
                  "type": "null"
                }
              ],
              "description": "Fields to include",
              "title": "Include"
            },
            "description": "Fields to include"
          },
          {
            "name": "exclude",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                {
                  "type": "null"
                }
              ],
              "description": "Fields to exclude",
              "title": "Exclude"
            },
            "description": "Fields to exclude"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {

                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/papers/": {
      "get": {
        "summary": "Search Papers",
        "description": "Search papers from the NIST Papers API.\n\nArgs:\n    searchphrase (str, optional): Text to search for in papers\n    from_date (str, optional): Start date for search (YYYY-MM-DD)\n    skip (int): Number of results to skip (pagination)\n    limit (int): Maximum number of results to return\n    include (List[str], optional): Fields to include in results\n    exclude (List[str], optional): Fields to exclude from results\n    \nReturns:\n    Dict: {\n        \"ResultData\": List of matched papers,\n        \"ResultCount\": Total matches found,\n        \"PageSize\": Number of results per page,\n        \"Metrics\": Query execution metrics\n    }\n    \nRaises:\n    KeyWordNotFoundException: If no papers found matching the criteria\n    InternalServerException: If there is an error connecting to the Papers API\n    IllegalArgumentException: If the parameters are invalid",
        "operationId": "search_papers_papers__get",
        "parameters": [
          {
            "name": "searchphrase",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Text to search for",
              "title": "Searchphrase"
            },
            "description": "Text to search for"
          },
          {
            "name": "from_date",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Search from date (YYYY-MM-DD)",
              "default": "2010-01-01",
              "title": "From Date"
            },
            "description": "Search from date (YYYY-MM-DD)"
          },
          {
            "name": "skip",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "description": "Number of papers to skip",
              "default": 0,
              "title": "Skip"
            },
            "description": "Number of papers to skip"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "description": "Maximum number of papers to return",
              "default": 10,
              "title": "Limit"
            },
            "description": "Maximum number of papers to return"
          },
          {
            "name": "include",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                {
                  "type": "null"
                }
              ],
              "description": "Fields to include",
              "title": "Include"
            },
            "description": "Fields to include"
          },
          {
            "name": "exclude",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                {
                  "type": "null"
                }
              ],
              "description": "Fields to exclude",
              "title": "Exclude"
            },
            "description": "Fields to exclude"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {

                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/code": {
      "get": {
        "summary": "Search Code",
        "description": "Search code entries in the database.\n\nArgs:\n    params (Dict[str, Any]): Search parameters including:\n        - searchphrase (str, optional): Text to search for\n        - skip (int, optional): Number of records to skip\n        - limit (int, optional): Maximum records to return\n        - sort.desc/sort.asc (str, optional): Fields to sort by\n        \nReturns:\n    Dict: {\n        \"ResultData\": List of matched records,\n        \"ResultCount\": Total number of matches,\n        \"PageSize\": Number of records per page,\n        \"Metrics\": Query execution metrics\n    }",
        "operationId": "search_code_code_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {

                }
              }
            }
          }
        }
      }
    },
    "/code/": {
      "get": {
        "summary": "Search Code",
        "description": "Search code entries in the database.\n\nArgs:\n    params (Dict[str, Any]): Search parameters including:\n        - searchphrase (str, optional): Text to search for\n        - skip (int, optional): Number of records to skip\n        - limit (int, optional): Maximum records to return\n        - sort.desc/sort.asc (str, optional): Fields to sort by\n        \nReturns:\n    Dict: {\n        \"ResultData\": List of matched records,\n        \"ResultCount\": Total number of matches,\n        \"PageSize\": Number of records per page,\n        \"Metrics\": Query execution metrics\n    }",
        "operationId": "search_code_code__get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {

                }
              }
            }
          }
        }
      }
    },
    "/code/{code_id}": {
      "get": {
        "summary": "Get Code",
        "description": "Get a single code entry by ID",
        "operationId": "get_code_code__code_id__get",
        "parameters": [
          {
            "name": "code_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Code Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {

                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/patents": {
      "get": {
        "summary": "Search Patents",
        "description": "Search patents with various filters",
        "operationId": "search_patents_patents_get",
        "parameters": [
          {
            "name": "searchphrase",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Text to search for",
              "title": "Searchphrase"
            },
            "description": "Text to search for"
          },
          {
            "name": "skip",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "description": "Number of patents to skip",
              "default": 0,
              "title": "Skip"
            },
            "description": "Number of patents to skip"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "description": "Maximum number of patents to return",
              "default": 10,
              "title": "Limit"
            },
            "description": "Maximum number of patents to return"
          },
          {
            "name": "sort_asc",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                {
                  "type": "null"
                }
              ],
              "description": "Fields to sort ascending",
              "title": "Sort Asc"
            },
            "description": "Fields to sort ascending"
          },
          {
            "name": "sort_desc",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                {
                  "type": "null"
                }
              ],
              "description": "Fields to sort descending",
              "title": "Sort Desc"
            },
            "description": "Fields to sort descending"
          },
          {
            "name": "include",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                {
                  "type": "null"
                }
              ],
              "description": "Fields to include",
              "title": "Include"
            },
            "description": "Fields to include"
          },
          {
            "name": "exclude",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                {
                  "type": "null"
                }
              ],
              "description": "Fields to exclude",
              "title": "Exclude"
            },
            "description": "Fields to exclude"
          },
          {
            "name": "laboratory",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Filter by laboratory",
              "title": "Laboratory"
            },
            "description": "Filter by laboratory"
          },
          {
            "name": "status",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Filter by status",
              "title": "Status"
            },
            "description": "Filter by status"
          },
          {
            "name": "file_date",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Filter by file date (YYYY-MM-DD)",
              "title": "File Date"
            },
            "description": "Filter by file date (YYYY-MM-DD)"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {

                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/patents/": {
      "get": {
        "summary": "Search Patents",
        "description": "Search patents with various filters",
        "operationId": "search_patents_patents__get",
        "parameters": [
          {
            "name": "searchphrase",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Text to search for",
              "title": "Searchphrase"
            },
            "description": "Text to search for"
          },
          {
            "name": "skip",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "description": "Number of patents to skip",
              "default": 0,
              "title": "Skip"
            },
            "description": "Number of patents to skip"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "description": "Maximum number of patents to return",
              "default": 10,
              "title": "Limit"
            },
            "description": "Maximum number of patents to return"
          },
          {
            "name": "sort_asc",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                {
                  "type": "null"
                }
              ],
              "description": "Fields to sort ascending",
              "title": "Sort Asc"
            },
            "description": "Fields to sort ascending"
          },
          {
            "name": "sort_desc",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                {
                  "type": "null"
                }
              ],
              "description": "Fields to sort descending",
              "title": "Sort Desc"
            },
            "description": "Fields to sort descending"
          },
          {
            "name": "include",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                {
                  "type": "null"
                }
              ],
              "description": "Fields to include",
              "title": "Include"
            },
            "description": "Fields to include"
          },
          {
            "name": "exclude",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                {
                  "type": "null"
                }
              ],
              "description": "Fields to exclude",
              "title": "Exclude"
            },
            "description": "Fields to exclude"
          },
          {
            "name": "laboratory",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Filter by laboratory",
              "title": "Laboratory"
            },
            "description": "Filter by laboratory"
          },
          {
            "name": "status",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Filter by status",
              "title": "Status"
            },
            "description": "Filter by status"
          },
          {
            "name": "file_date",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Filter by file date (YYYY-MM-DD)",
              "title": "File Date"
            },
            "description": "Filter by file date (YYYY-MM-DD)"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {

                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/patents/{patent_id}": {
      "get": {
        "summary": "Get Patent",
        "description": "Get a patent by ID or patent number",
        "operationId": "get_patent_patents__patent_id__get",
        "parameters": [
          {
            "name": "patent_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Patent Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {

                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/apis": {
      "get": {
        "summary": "Search Apis",
        "description": "Search APIs in the database.\n\nArgs:\n    params (Dict[str, Any]): Search parameters including:\n        - searchphrase (str, optional): Text to search for\n        - skip (int, optional): Number of records to skip\n        - limit (int, optional): Maximum records to return\n        - include (List[str], optional): Fields to include\n        - exclude (List[str], optional): Fields to exclude\n        - sort.desc/sort.asc (str, optional): Fields to sort by\n        \nReturns:\n    Dict: {\n        \"ResultData\": List of matched APIs,\n        \"ResultCount\": Total number of matches,\n        \"PageSize\": Number of records per page,\n        \"Metrics\": Query execution metrics\n    }",
        "operationId": "search_apis_apis_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {

                }
              }
            }
          }
        }
      }
    },
    "/apis/": {
      "get": {
        "summary": "Search Apis",
        "description": "Search APIs in the database.\n\nArgs:\n    params (Dict[str, Any]): Search parameters including:\n        - searchphrase (str, optional): Text to search for\n        - skip (int, optional): Number of records to skip\n        - limit (int, optional): Maximum records to return\n        - include (List[str], optional): Fields to include\n        - exclude (List[str], optional): Fields to exclude\n        - sort.desc/sort.asc (str, optional): Fields to sort by\n        \nReturns:\n    Dict: {\n        \"ResultData\": List of matched APIs,\n        \"ResultCount\": Total number of matches,\n        \"PageSize\": Number of records per page,\n        \"Metrics\": Query execution metrics\n    }",
        "operationId": "search_apis_apis__get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {

                }
              }
            }
          }
        }
      }
    },
    "/apis/{api_id}": {
      "get": {
        "summary": "Get Api",
        "description": "Get a single API by ID.\n\nArgs:\n    api_id (str): The ID of the API to retrieve\n    \nReturns:\n    Dict: The API data with metadata",
        "operationId": "get_api_apis__api_id__get",
        "parameters": [
          {
            "name": "api_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Api Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {

                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/releasesets": {
      "get": {
        "summary": "Search Releasesets",
        "description": "Search release sets in the database.\n\nArgs:\n    params (Dict[str, Any]): Search parameters including:\n        - searchphrase (str, optional): Text to search for\n        - skip (int, optional): Number of records to skip\n        - limit (int, optional): Maximum records to return\n        - include (List[str], optional): Fields to include\n        - exclude (List[str], optional): Fields to exclude\n        - sort.desc/sort.asc (str, optional): Fields to sort by\n        \nReturns:\n    Dict: {\n        \"ResultData\": List of matched release sets,\n        \"ResultCount\": Total number of matches,\n        \"PageSize\": Number of records per page,\n        \"Metrics\": Query execution metrics\n    }",
        "operationId": "search_releasesets_releasesets_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {

                }
              }
            }
          }
        }
      }
    },
    "/releasesets/": {
      "get": {
        "summary": "Search Releasesets",
        "description": "Search release sets in the database.\n\nArgs:\n    params (Dict[str, Any]): Search parameters including:\n        - searchphrase (str, optional): Text to search for\n        - skip (int, optional): Number of records to skip\n        - limit (int, optional): Maximum records to return\n        - include (List[str], optional): Fields to include\n        - exclude (List[str], optional): Fields to exclude\n        - sort.desc/sort.asc (str, optional): Fields to sort by\n        \nReturns:\n    Dict: {\n        \"ResultData\": List of matched release sets,\n        \"ResultCount\": Total number of matches,\n        \"PageSize\": Number of records per page,\n        \"Metrics\": Query execution metrics\n    }",
        "operationId": "search_releasesets_releasesets__get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {

                }
              }
            }
          }
        }
      }
    },
    "/releasesets/{releaseset_id}": {
      "get": {
        "summary": "Get Releaseset",
        "description": "Get a single release set by ID.\n\nArgs:\n    releaseset_id (str): The ID of the release set to retrieve\n    \nReturns:\n    Dict: The release set data with metadata",
        "operationId": "get_releaseset_releasesets__releaseset_id__get",
        "parameters": [
          {
            "name": "releaseset_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Releaseset Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {

                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/taxonomy": {
      "get": {
        "summary": "Search Taxonomy",
        "description": "Search taxonomy entries in the database.\n\nArgs:\n    params (Dict[str, Any]): Search parameters including:\n        - searchphrase (str, optional): Text to search for\n        - skip (int, optional): Number of records to skip\n        - limit (int, optional): Maximum records to return\n        - include (List[str], optional): Fields to include\n        - exclude (List[str], optional): Fields to exclude\n        - sort.desc/sort.asc (str, optional): Fields to sort by\n        \nReturns:\n    Dict: {\n        \"ResultData\": List of matched taxonomy entries,\n        \"ResultCount\": Total number of matches,\n        \"PageSize\": Number of records per page,\n        \"Metrics\": Query execution metrics\n    }",
        "operationId": "search_taxonomy_taxonomy_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {

                }
              }
            }
          }
        }
      }
    },
    "/taxonomy/": {
      "get": {
        "summary": "Search Taxonomy",
        "description": "Search taxonomy entries in the database.\n\nArgs:\n    params (Dict[str, Any]): Search parameters including:\n        - searchphrase (str, optional): Text to search for\n        - skip (int, optional): Number of records to skip\n        - limit (int, optional): Maximum records to return\n        - include (List[str], optional): Fields to include\n        - exclude (List[str], optional): Fields to exclude\n        - sort.desc/sort.asc (str, optional): Fields to sort by\n        \nReturns:\n    Dict: {\n        \"ResultData\": List of matched taxonomy entries,\n        \"ResultCount\": Total number of matches,\n        \"PageSize\": Number of records per page,\n        \"Metrics\": Query execution metrics\n    }",
        "operationId": "search_taxonomy_taxonomy__get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {

                }
              }
            }
          }
        }
      }
    },
    "/taxonomy/{taxonomy_id}": {
      "get": {
        "summary": "Get Taxonomy",
        "description": "Get a single taxonomy entry by ID.\n\nArgs:\n    taxonomy_id (str): The ID of the taxonomy entry to retrieve\n    \nReturns:\n    Dict: The taxonomy data with metadata",
        "operationId": "get_taxonomy_taxonomy__taxonomy_id__get",
        "parameters": [
          {
            "name": "taxonomy_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Taxonomy Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {

                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/versions": {
      "get": {
        "summary": "Search Versions",
        "description": "Search version entries in the database.\n\nArgs:\n    params (Dict[str, Any]): Search parameters including:\n        - searchphrase (str, optional): Text to search for\n        - skip (int, optional): Number of records to skip\n        - limit (int, optional): Maximum records to return\n        - include (List[str], optional): Fields to include\n        - exclude (List[str], optional): Fields to exclude\n        - sort.desc/sort.asc (str, optional): Fields to sort by\n        \nReturns:\n    Dict: {\n        \"ResultData\": List of matched version entries,\n        \"ResultCount\": Total number of matches,\n        \"PageSize\": Number of records per page,\n        \"Metrics\": Query execution metrics\n    }",
        "operationId": "search_versions_versions_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {

                }
              }
            }
          }
        }
      }
    },
    "/versions/": {
      "get": {
        "summary": "Search Versions",
        "description": "Search version entries in the database.\n\nArgs:\n    params (Dict[str, Any]): Search parameters including:\n        - searchphrase (str, optional): Text to search for\n        - skip (int, optional): Number of records to skip\n        - limit (int, optional): Maximum records to return\n        - include (List[str], optional): Fields to include\n        - exclude (List[str], optional): Fields to exclude\n        - sort.desc/sort.asc (str, optional): Fields to sort by\n        \nReturns:\n    Dict: {\n        \"ResultData\": List of matched version entries,\n        \"ResultCount\": Total number of matches,\n        \"PageSize\": Number of records per page,\n        \"Metrics\": Query execution metrics\n    }",
        "operationId": "search_versions_versions__get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {

                }
              }
            }
          }
        }
      }
    },
    "/versions/{version_id}": {
      "get": {
        "summary": "Get Version",
        "description": "Get a single version entry by ID.\n\nArgs:\n    version_id (str): The ID of the version to retrieve\n    \nReturns:\n    Dict: The version data with metadata",
        "operationId": "get_version_versions__version_id__get",
        "parameters": [
          {
            "name": "version_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Version Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {

                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/usagemetrics/records/{record_id}": {
      "get": {
        "tags": [
          "Metrics",
          "metrics"
        ],
        "summary": "Get Record Metrics",
        "description": "Get metrics for a specific record/dataset",
        "operationId": "get_record_metrics_usagemetrics_records__record_id__get",
        "parameters": [
          {
            "name": "record_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Record ID to get metrics for",
              "title": "Record Id"
            },
            "description": "Record ID to get metrics for"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {

                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/usagemetrics/records": {
      "get": {
        "tags": [
          "Metrics",
          "metrics"
        ],
        "summary": "Get Records Metrics",
        "description": "Get metrics for multiple records/datasets with pagination and sorting",
        "operationId": "get_records_metrics_usagemetrics_records_get",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "description": "Page number",
              "default": 1,
              "title": "Page"
            },
            "description": "Page number"
          },
          {
            "name": "size",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 100,
              "minimum": 1,
              "description": "Page size",
              "default": 10,
              "title": "Size"
            },
            "description": "Page size"
          },
          {
            "name": "sort_by",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Sort by field (downloads or users)",
              "default": "downloads",
              "title": "Sort By"
            },
            "description": "Sort by field (downloads or users)"
          },
          {
            "name": "sort_order",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Sort order (asc or desc)",
              "default": "desc",
              "title": "Sort Order"
            },
            "description": "Sort order (asc or desc)"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {

                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/usagemetrics/files/{file_path}": {
      "get": {
        "tags": [
          "Metrics",
          "metrics"
        ],
        "summary": "Get File Metrics",
        "description": "Get metrics for a specific file",
        "operationId": "get_file_metrics_usagemetrics_files__file_path__get",
        "parameters": [
          {
            "name": "file_path",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "File path to get metrics for",
              "title": "File Path"
            },
            "description": "File path to get metrics for"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {

                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/usagemetrics/files": {
      "get": {
        "tags": [
          "Metrics",
          "metrics"
        ],
        "summary": "Get Files Metrics",
        "description": "Get metrics for all files with sorting",
        "operationId": "get_files_metrics_usagemetrics_files_get",
        "parameters": [
          {
            "name": "sort_by",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Sort by field (downloads or filepath)",
              "default": "downloads",
              "title": "Sort By"
            },
            "description": "Sort by field (downloads or filepath)"
          },
          {
            "name": "sort_order",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Sort order (asc or desc)",
              "default": "desc",
              "title": "Sort Order"
            },
            "description": "Sort order (asc or desc)"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {

                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/usagemetrics/repo": {
      "get": {
        "tags": [
          "Metrics",
          "metrics"
        ],
        "summary": "Get Repo Metrics",
        "description": "Get repository-level metrics",
        "operationId": "get_repo_metrics_usagemetrics_repo_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {

                }
              }
            }
          }
        }
      }
    },
    "/usagemetrics/totalusers": {
      "get": {
        "tags": [
          "Metrics",
          "metrics"
        ],
        "summary": "Get Unique Users",
        "description": "Get total unique users count",
        "operationId": "get_unique_users_usagemetrics_totalusers_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {

                }
              }
            }
          }
        }
      }
    },
    "/debug/record-collection": {
      "get": {
        "summary": "Debug Record Collection",
        "description": "Debug endpoint to test record collection directly",
        "operationId": "debug_record_collection_debug_record_collection_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {

                }
              }
            }
          }
        }
      }
    },
    "/": {
      "get": {
        "summary": "Root",
        "description": "Root endpoint that returns HTML page",
        "operationId": "root__get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "text/html": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "HTTPValidationError": {
        "properties": {
          "detail": {
            "items": {
              "$ref": "#/components/schemas/ValidationError"
            },
            "type": "array",
            "title": "Detail"
          }
        },
        "type": "object",
        "title": "HTTPValidationError"
      },
      "ValidationError": {
        "properties": {
          "loc": {
            "items": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "integer"
                }
              ]
            },
            "type": "array",
            "title": "Location"
          },
          "msg": {
            "type": "string",
            "title": "Message"
          },
          "type": {
            "type": "string",
            "title": "Error Type"
          }
        },
        "type": "object",
        "required": [
          "loc",
          "msg",
          "type"
        ],
        "title": "ValidationError"
      }
    }
  }
}